//
// Generated file, do not edit! Created by nedtool 5.6 from SpeedMessage.msg.
//

#ifndef __VEINS_SPEEDMESSAGE_M_H
#define __VEINS_SPEEDMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace veins {

class SpeedMessage;
} // namespace veins

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4


namespace veins {

/**
 * Class generated from <tt>SpeedMessage.msg:4</tt> by nedtool.
 * <pre>
 * packet SpeedMessage extends BaseFrame1609_4
 * {
 *     // The speed of the car in m/s
 *     double speed;
 *     // The ID of the sending vehicle
 *     string senderId;
 * }
 * </pre>
 */
class SpeedMessage : public ::veins::BaseFrame1609_4
{
  protected:
    double speed = 0;
    omnetpp::opp_string senderId;

  private:
    void copy(const SpeedMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SpeedMessage&);

  public:
    SpeedMessage(const char *name=nullptr, short kind=0);
    SpeedMessage(const SpeedMessage& other);
    virtual ~SpeedMessage();
    SpeedMessage& operator=(const SpeedMessage& other);
    virtual SpeedMessage *dup() const override {return new SpeedMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual const char * getSenderId() const;
    virtual void setSenderId(const char * senderId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SpeedMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SpeedMessage& obj) {obj.parsimUnpack(b);}

} // namespace veins

#endif // ifndef __VEINS_SPEEDMESSAGE_M_H

